namespace AdventOfCode

open System
open Microsoft.VisualStudio.TestTools.UnitTesting

module DaySix =
  let mutable maxRow: int = 0
  let mutable maxCol: int = 0
  
  type Direction =
    | North
    | South
    | East
    | West

    member this.Turn =
      match this with
      | North -> East
      | South -> West
      | East -> South
      | West -> North

  type Position =
    { Row: int
      Column: int }

    member this.Move(direction: Direction) =
      match direction with
      | North -> { this with Row = this.Row - 1 }
      | South -> { this with Row = this.Row + 1 }
      | East -> { this with Column = this.Column + 1 }
      | West -> { this with Column = this.Column - 1 }

  type Cell =
    | Guard of Position * Direction
    | Obstruction
    | Empty

  type GuardHistory =
    { Position: Position
      Direction: Direction }

  let parse (input: string) : Map<Position, Cell> =
    input.Trim().Split(Environment.NewLine)
    |> Array.mapi (fun i x ->
      x.ToCharArray()
      |> Array.mapi (fun j y ->
        let position = { Row = i; Column = j }

        (position,
         match y with
         | '^' -> Guard(position, North)
         | '#' -> Obstruction
         | '.' -> Empty
         | _ -> failwith "Caractère invalide")))
    |> Array.collect id
    |> Map.ofArray

  let findGuard (map: Map<Position, Cell>) : Option<Position * Direction> =
    map
    |> Map.tryPick (fun pos cell ->
      match cell with
      | Guard(_, dir) -> Some(pos, dir)
      | _ -> None)

  let isObstruction (map: Map<Position, Cell>) (position: Position) : bool =
    map |> Map.exists (fun k v -> k = position && v = Obstruction)

  let private getDimensions (map: Map<Position, Cell>) =
    let positions = map |> Map.keys |> Seq.toList
    let maxRow = positions |> List.map _.Row |> List.max
    let maxCol = positions |> List.map _.Column |> List.max
    (maxRow, maxCol)

  let private cellToChar (cell: Cell) =
    match cell with
    | Guard(_, North) -> '^'
    | Guard(_, South) -> 'v'
    | Guard(_, East) -> '>'
    | Guard(_, West) -> '<'
    | Obstruction -> '#'
    | Empty -> '.'

  let printMap (map: Map<Position, Cell>) =
    let maxRow, maxCol = getDimensions map

    [ 0..maxRow ]
    |> List.iter (fun row ->
      [ 0..maxCol ]
      |> List.map (fun col ->
        let pos = { Row = row; Column = col }

        match map.TryFind pos with
        | Some cell -> cellToChar cell
        | None -> '.')
      |> Array.ofList
      |> String
      |> printfn "%s")

  let isInBounds (position: Position) : bool =
    let row = position.Row
    let col = position.Column
    row >= 0 && row <= maxRow && col >= 0 && col <= maxCol

  module PartOne =
    let guardMove (map: Map<Position, Cell>) (history: GuardHistory list) : Map<Position, Cell> * GuardHistory list =
      match map |> findGuard with
      | None -> map, history
      | Some(p, d) ->
        let newP = p.Move d

        if isObstruction map newP then
          let newD = d.Turn
          let newGuard = Guard(p, newD)
          let newMap = map |> Map.remove p |> Map.add p newGuard
          let newHistory = { Position = p; Direction = d } :: history
          newMap, newHistory
        else
          let newGuard = Guard(newP, d)
          let newMap = map |> Map.remove p |> Map.add newP newGuard
          let newHistory = { Position = p; Direction = d } :: history
          newMap, newHistory

    let run (input: string) : int =
      let mutable map = input |> parse
      let row, col = getDimensions map
      maxRow <- row
      maxCol <- col
      let mutable history = []
      let mutable guardInBounds = true

      while guardInBounds do
        let newMap, newHistory = guardMove map history
        map <- newMap
        history <- newHistory
        guardInBounds <- isInBounds history.Head.Position

      history |> List.distinctBy _.Position |> (fun lst -> List.length lst - 1)

  module PartTwo =
    let guardMove
      (map: Map<Position, Cell>)
      (history: GuardHistory list)
      (virtualObstruction: int)
      : Map<Position, Cell> * GuardHistory list * int =
      match map |> findGuard with
      | None -> map, history, virtualObstruction
      | Some(p, d) ->
        let newP = p.Move d

        if isObstruction map newP then
          let newD = d.Turn
          let newGuard = Guard(p, newD)
          let newMap = map |> Map.remove p |> Map.add p newGuard
          let newHistory = { Position = p; Direction = d } :: history
          newMap, newHistory, virtualObstruction
        else
          let newGuard = Guard(newP, d)
          let newMap = map |> Map.remove p |> Map.add newP newGuard
          let newHistory = { Position = p; Direction = d } :: history
          let neighborsOnTheRight = match d with
                                    | North -> East
                                    | South -> West
                                    | East -> South
                                    | West -> North
          let mutable newVirtualObstruction = virtualObstruction
          let mutable stopSearch = false
          let mutable neighborsPosition = match d with
                                          | North -> { Row = newP.Row; Column = newP.Column + 1 }
                                          | South -> { Row = newP.Row; Column = newP.Column - 1 }
                                          | East ->  { Row = newP.Row + 1; Column = newP.Column }
                                          | West ->  { Row = newP.Row - 1; Column = newP.Column }
          while not stopSearch && isInBounds neighborsPosition do
            let hasNeighbors = history |> List.contains { Position = neighborsPosition; Direction = neighborsOnTheRight }
            if hasNeighbors then
              newVirtualObstruction <- virtualObstruction + 1
              stopSearch <- true
            else
              let e = map |> Map.tryFind neighborsPosition
              match e with
              | None -> neighborsPosition <- match d with
                                             | North -> { Row = neighborsPosition.Row; Column = neighborsPosition.Column + 1 }
                                             | South -> { Row = neighborsPosition.Row; Column = neighborsPosition.Column - 1 }
                                             | East ->  { Row = neighborsPosition.Row + 1; Column = neighborsPosition.Column }
                                             | West ->  { Row = neighborsPosition.Row - 1; Column = neighborsPosition.Column }
              | Some cell -> match cell with
                             | Guard _ -> ()
                             | Obstruction ->
                               stopSearch <- true
                             | Empty ->
                               neighborsPosition <- match d with
                                                    | North -> { Row = neighborsPosition.Row; Column = neighborsPosition.Column + 1 }
                                                    | South -> { Row = neighborsPosition.Row; Column = neighborsPosition.Column - 1 }
                                                    | East ->  { Row = neighborsPosition.Row + 1; Column = neighborsPosition.Column }
                                                    | West ->  { Row = neighborsPosition.Row - 1; Column = neighborsPosition.Column }
          newMap, newHistory, newVirtualObstruction

    let run (input: string) : int =
      let mutable map = input |> parse
      let row, col = getDimensions map
      maxRow <- row
      maxCol <- col
      let mutable guardInBounds = true
      let mutable history = []
      let mutable virtualObstruction = 0

      while guardInBounds do
        let newMap, newHistory, newVirtualObstruction =
          guardMove map history virtualObstruction

        map <- newMap
        history <- newHistory
        virtualObstruction <- newVirtualObstruction
        guardInBounds <- isInBounds history.Head.Position

      virtualObstruction

[<TestClass>]
type DaySixTest() =
  let exampleInput =
    """
....#.....
.........#
..........
..#.......
.......#..
..........
.#..^.....
........#.
#.........
......#..."""

  let puzzleInput =
    """
..................#................................................................#........#.....................................
...#...........#...................................................#........................................#.................#...
...................................#................#.#...............#.................................................#.........
.....#......#................#.....................................................................#..........#........#......#...
............................................................................................#.....................#...............
.....................#..##...#........................#.................#.......................#..#.........#.......#...#......#.
............##....................................##..................#...............................#....#......................
.............#............#.#..#.......#...........#..............#...............#.....#.........................................
....................#..........##.........#.........#................#............................................................
....#.......#................................................................#...#.#..........................................#.#.
..#..............#.....................................#..........#.#....#..............#..................#.#............#.......
.#.......#.........................#........................#..#.....#............................................................
........#...#......................#...........#......................................#....................#......................
.............................#..............#........##....#....................#......#....................#............#......#.
..............#..............#............#.......................##....#..........................................#.........#....
.............#............#..........#..........#...#.....................................................#.......................
..#........#.....#..........................................#................................................#...#.#...#..........
........#.....................#...#..#......#.........................................................#.....##.........#..........
..............................................................................................#...#...............................
..#.......................#..........................#......#...................................................................#.
.......#.........................#..............#.........#.............#.......................................#...#.............
..................#.................#.......................#....................#....................................#...........
...#...#.......#......##.#...............#....#..............#..........................................#....#..#.................
#................................#.......#.....#.......#.............#..................#........#................................
...........#..................................#.......................................................................#.#..#......
.......#........#.........................................#..........................#...........................#.....#..........
................#..#.....................#..#...........................#...........................................#.............
#...#.......................#................................................#................#................................#..
..........#...........................#.......#............................................................................#.....#
..................................#............................................................#..................................
......................#........#.............#....#.....#.......#..........................#..........................#...........
...........................##.................#.............#........................#...#..................#.....................
.............................................................................................................#....#..........#....
................#...................................#...........#..........#....................#............................#....
........#....#................................................#................##..#..................................#...........
...........#....................................................#...#.#......#....................................................
.......................#.........................................................^....................................#...........
..........................#.............##..#........#.#....#.......#....................#...........#.........#.....#............
........#...........................#..#..........................................................#...............................
....#....................................#....#.........................................#.........#...............................
...............#...................................#.....#.................................#....................................#.
......#...............................................................#.............................#........................#....
.........................#.....#.........................#.#...............#.........#.....#..................#..#.........#......
.........................................................#......#........##.......................#...#......#................#...
.......................................#.....#.................................#..................................................
..................#..................................#..........................................................................#.
...................#....#.........#.......#................#....................#.........................#......#.....#..#.......
................................#..............................................................................#....#.............
.....................#.#.............#.................#..........#.......#.........................................#.............
......#....................#....................................................................#...#.............................
........#........#...........#.##.............#........................#............#..............#.........#....#........#......
........................#.................................................................#.......................................
............................................................#.....#....................#............#.....#....#............#.....
...........#............#....#........................................................##............#..............#..............
...........#...........#.....#..............#..............##....#........#......#................................................
..#................................................................................#......................#......#................
....................#.........#......................#.............................#.......#.......................#.............#
..#...#....#......................................................................................................#...............
...........#................................................................................#...............................#.....
....................................#............#..........#.........................#..................................#.......#
...................#......#...................#............#......#........#................#.............#...........#.........#.
........................#..................................#........#..................#..........................................
............#..#...........#..................##....................#...........................................#.................
.......................................................................................#.....#............#.......................
...............................................#....#................................#..#..........................#..#...........
..............#..#.....#.........#....................#.......#..#..............#...............................#.....#...........
..........#............................#..........................................................................................
........................................#........#........................................................#.#.....................
#................#......................#..................................................................................#......
...............................................................................#................................#.................
...................................................................................................................#.#........#...
#........................................................................#......................................#.#...............
...#......#............#...................#.............#........#..........................................#......#.............
..............##....#...................................................#......................#..................................
...............#........................................................................#...........#...#.#.......................
..........#.#.....#................................#...........#........#.......#.................................................
#....................#......................................................................................#.....................
..............#...##...........................................#.............#.......#..................#..............#..........
.#.............................................#..............................................................................#...
...#................................#............................................#............................#...................
..............................#......................................................#..........................................#.
...................#.....................................#..................................#......#..............................
....#.#..........##.............#.......#........................##..........#.................#..................................
#..#................#........##....................................................................................#..............
........#...#.........................................................................#...........................................
......................................................#....#...................#..#.................................#.............
........#...............#........#..............................................#............................#....................
...#..............................#.........................................##.......................................#....#.......
...#................#..............#.......#......................................................................................
........#..................#.............................................................#...........................#....#.......
......................#.#..........#.......#..................................#..#...#............#...............#...............
.....#..................#....#..#......#.......................#.....................................................#............
.....#................................#.........................#..................#.#..........#...#............#.....#..........
....#...................#....#.#.........#........#..................................................................#....#..#....
........#...............#......................................#........#..............................#..........................
....#...#.#.....#..............#..................#..........#...#..#......................#...#..........#......................#
...........#...................................................................................................#................#.
.................................##..............#.............................#...............................#..................
...........#.................#.............##...................................#.......................#.................##......
.....#..................#......#........#.................................................#..#........................#..#........
......#.......#......................................................................#.#.........#....#...........................
..................#.#........................#......#................................................................#......#.....
.....................#............#...................#.....#....................................#.......#..........#.......#.....
#.............................#...............................#...#...............................................................
..##.........#........#......................................#.....................#...#.............#............#..#............
..........#.....................#..#....................#...#....................#....................#.....................#.....
...........#..........#...............#..#..........#..............................................#.#............................
............#...#...#.............#.........#.............................#...............#.......................................
.........#...........#...............................................................#............................................
.#..#.................................................................#............#.#.......................##...................
........##............#...................#................................#......................................................
............................................#..........................#..........................................................
#...................#...........#..............#...#............#.#........#.................#......#.............................
........#....................................#....................................................................................
...........#.........#..#...............#...........#.....##.#......#....##............#....#....#.#.........##.........#.........
..#......................#..........#.................#.................#......#.............................#........#...........
....................#.................#....#..............................#....#.............#....#....#.....................#....
............#.................#.................................#...............................#..#...........................#..
...................................................#.....#..............#.......#....................#.#..........................
..#.........##..#........#...................................................................................#............#.......
.....#..............................#......................................................................#........#.............
................................#........##.......#...............#..............#.......#...#.#........#.........................
..............................#.....................#.........................................#..................................#
...........#...................##.................#.................................#...............................#........#....
..............................#...##......#..................#...#................................#......#.......#...............#
.....................##......#......#.#.......#..............#......#.................#.........#...................#.............
..........................#................................#...........#..........................................................
...#.....#....................#.....................#...#.....#.............................#.#....#.....#.#.................#....
............................#...#........#......................................................................#.....#...........
............#..........##..................#.............................................................#.....#..#...............
"""

  [<TestMethod>]
  member this.PartOneExample() =
    Assert.AreEqual<int>(41, DaySix.PartOne.run exampleInput)

  [<TestMethod>]
  member this.PartOnePuzzle() =
    Assert.AreEqual<int>(4656, DaySix.PartOne.run puzzleInput)

  [<TestMethod>]
  member this.PartTwoExample() =
    Assert.AreEqual<int>(6, DaySix.PartTwo.run exampleInput)

  [<TestMethod>]
  member this.PartTwoPuzzle() =
    Assert.AreEqual<int>(1575, DaySix.PartTwo.run puzzleInput)
